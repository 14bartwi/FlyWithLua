-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- --   FlyWithLua HUD module automatic generated HUD file, do not edit!   -- --
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

require "graphics"

function draw_my_radios()
  -- are we inside the HUD?
  if MOUSE_X < SCREEN_WIDTH+(-81) or MOUSE_X > SCREEN_WIDTH+(-1) or MOUSE_Y < (1) or MOUSE_Y > (316) then return end

  -- we draw some background to the HUD
  graphics.set_color(0, 0, 0, 0.5)
  graphics.draw_rectangle(SCREEN_WIDTH+(-81), (1), SCREEN_WIDTH+(-1), (316))

  -- init the graphics system
  XPLMSetGraphicsState(0,0,0,1,1,0,0)

  -- draw backlight indicator for element 'AP'
  if xp_autopilot_mode == 1 then
    graphics.set_color(1,1,0,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-51),281,SCREEN_WIDTH+(-41),316)
  end

  -- draw backlight indicator for element 'AP'
  if xp_autopilot_mode == 2 then
    graphics.set_color(0,1,0,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-51),281,SCREEN_WIDTH+(-41),316)
  end

  -- draw backlight indicator for element 'Speed'
  if xp_autothrottle_enabled == 1 then
    graphics.set_color(0,1,0,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-11),281,SCREEN_WIDTH+(-1),316)
  end

  -- draw backlight indicator for element 'ALT'
  if bit.band(AP_STATE, 32) > 0 then
    graphics.set_color(1,0,0,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-11),246,SCREEN_WIDTH+(-1),281)
  end

  -- draw backlight indicator for element 'ALT'
  if bit.band(AP_STATE, 16384) > 0 then
    graphics.set_color(0,1,0,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-11),246,SCREEN_WIDTH+(-1),281)
  end

  -- draw backlight indicator for element 'VVI'
  if bit.band(AP_STATE, 16) > 0 then
    graphics.set_color(0,1,0,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-11),211,SCREEN_WIDTH+(-1),246)
  end

  -- draw backlight indicator for element 'NAV'
  if bit.band(AP_STATE, 256) > 0 then
    graphics.set_color(1,0,0,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-11),106,SCREEN_WIDTH+(-1),141)
  end

  -- draw backlight indicator for element 'NAV'
  if bit.band(AP_STATE, 512) > 0 then
    graphics.set_color(0,1,0,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-11),106,SCREEN_WIDTH+(-1),141)
  end

  -- draw backlight indicator for element 'HDG'
  if bit.band(AP_STATE, 2) > 0 then
    graphics.set_color(0,1,0,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-51),176,SCREEN_WIDTH+(-41),211)
  end

  -- draw backlight indicator for element 'SQUAWK'
  if TRANSPONDER_MODE == 0 then
    graphics.set_color(0,0,1,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-11),36,SCREEN_WIDTH+(-1),71)
  end

  -- draw backlight indicator for element 'SQUAWK'
  if TRANSPONDER_MODE == 1 then
    graphics.set_color(1,0,0,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-11),36,SCREEN_WIDTH+(-1),71)
  end

  -- draw backlight indicator for element 'SQUAWK'
  if TRANSPONDER_MODE == 2 then
    graphics.set_color(0,1,0,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-11),36,SCREEN_WIDTH+(-1),71)
  end

  -- draw backlight indicator for element 'SQUAWK'
  if TRANSPONDER_MODE == 3 then
    graphics.set_color(1,1,0,1)
    graphics.draw_rectangle(SCREEN_WIDTH+(-11),36,SCREEN_WIDTH+(-1),71)
  end


  -- set color and width
  graphics.set_color(1, 1, 1, 1)
  graphics.set_width(2)

  -- draw lines around element 'AP'
  graphics.set_color(1,1,1,1)
  graphics.draw_line(SCREEN_WIDTH+(-81), 281, SCREEN_WIDTH+(-41), 281)
  graphics.draw_line(SCREEN_WIDTH+(-41), 281, SCREEN_WIDTH+(-41), 316)
  graphics.draw_line(SCREEN_WIDTH+(-41), 316, SCREEN_WIDTH+(-81), 316)
  graphics.draw_line(SCREEN_WIDTH+(-81), 316, SCREEN_WIDTH+(-81), 281)

  -- draw lines around element 'Speed'
  graphics.set_color(1,1,1,1)
  graphics.draw_line(SCREEN_WIDTH+(-41), 281, SCREEN_WIDTH+(-1), 281)
  graphics.draw_line(SCREEN_WIDTH+(-1), 281, SCREEN_WIDTH+(-1), 316)
  graphics.draw_line(SCREEN_WIDTH+(-1), 316, SCREEN_WIDTH+(-41), 316)
  graphics.draw_line(SCREEN_WIDTH+(-41), 316, SCREEN_WIDTH+(-41), 281)

  -- draw lines around element 'ALT'
  graphics.set_color(1,1,1,1)
  graphics.draw_line(SCREEN_WIDTH+(-81), 246, SCREEN_WIDTH+(-1), 246)
  graphics.draw_line(SCREEN_WIDTH+(-1), 246, SCREEN_WIDTH+(-1), 281)
  graphics.draw_line(SCREEN_WIDTH+(-1), 281, SCREEN_WIDTH+(-81), 281)
  graphics.draw_line(SCREEN_WIDTH+(-81), 281, SCREEN_WIDTH+(-81), 246)

  -- draw lines around element 'VVI'
  graphics.set_color(1,1,1,1)
  graphics.draw_line(SCREEN_WIDTH+(-81), 211, SCREEN_WIDTH+(-1), 211)
  graphics.draw_line(SCREEN_WIDTH+(-1), 211, SCREEN_WIDTH+(-1), 246)
  graphics.draw_line(SCREEN_WIDTH+(-1), 246, SCREEN_WIDTH+(-81), 246)
  graphics.draw_line(SCREEN_WIDTH+(-81), 246, SCREEN_WIDTH+(-81), 211)

  -- draw lines around element 'COM'
  graphics.set_color(1,1,1,1)
  graphics.draw_line(SCREEN_WIDTH+(-81), 141, SCREEN_WIDTH+(-1), 141)
  graphics.draw_line(SCREEN_WIDTH+(-1), 141, SCREEN_WIDTH+(-1), 176)
  graphics.draw_line(SCREEN_WIDTH+(-1), 176, SCREEN_WIDTH+(-81), 176)
  graphics.draw_line(SCREEN_WIDTH+(-81), 176, SCREEN_WIDTH+(-81), 141)

  -- draw lines around element 'NAV'
  graphics.set_color(1,1,1,1)
  graphics.draw_line(SCREEN_WIDTH+(-81), 106, SCREEN_WIDTH+(-1), 106)
  graphics.draw_line(SCREEN_WIDTH+(-1), 106, SCREEN_WIDTH+(-1), 141)
  graphics.draw_line(SCREEN_WIDTH+(-1), 141, SCREEN_WIDTH+(-81), 141)
  graphics.draw_line(SCREEN_WIDTH+(-81), 141, SCREEN_WIDTH+(-81), 106)

  -- draw lines around element 'ADF'
  graphics.set_color(1,1,1,1)
  graphics.draw_line(SCREEN_WIDTH+(-81), 71, SCREEN_WIDTH+(-1), 71)
  graphics.draw_line(SCREEN_WIDTH+(-1), 71, SCREEN_WIDTH+(-1), 106)
  graphics.draw_line(SCREEN_WIDTH+(-1), 106, SCREEN_WIDTH+(-81), 106)
  graphics.draw_line(SCREEN_WIDTH+(-81), 106, SCREEN_WIDTH+(-81), 71)

  -- draw lines around element 'OBS'
  graphics.set_color(1,1,1,1)
  graphics.draw_line(SCREEN_WIDTH+(-41), 176, SCREEN_WIDTH+(-1), 176)
  graphics.draw_line(SCREEN_WIDTH+(-1), 176, SCREEN_WIDTH+(-1), 211)
  graphics.draw_line(SCREEN_WIDTH+(-1), 211, SCREEN_WIDTH+(-41), 211)
  graphics.draw_line(SCREEN_WIDTH+(-41), 211, SCREEN_WIDTH+(-41), 176)

  -- draw lines around element 'HDG'
  graphics.set_color(1,1,1,1)
  graphics.draw_line(SCREEN_WIDTH+(-81), 176, SCREEN_WIDTH+(-41), 176)
  graphics.draw_line(SCREEN_WIDTH+(-41), 176, SCREEN_WIDTH+(-41), 211)
  graphics.draw_line(SCREEN_WIDTH+(-41), 211, SCREEN_WIDTH+(-81), 211)
  graphics.draw_line(SCREEN_WIDTH+(-81), 211, SCREEN_WIDTH+(-81), 176)

  -- draw lines around element 'SQUAWK'
  graphics.set_color(1,1,1,1)
  graphics.draw_line(SCREEN_WIDTH+(-81), 36, SCREEN_WIDTH+(-1), 36)
  graphics.draw_line(SCREEN_WIDTH+(-1), 36, SCREEN_WIDTH+(-1), 71)
  graphics.draw_line(SCREEN_WIDTH+(-1), 71, SCREEN_WIDTH+(-81), 71)
  graphics.draw_line(SCREEN_WIDTH+(-81), 71, SCREEN_WIDTH+(-81), 36)

  -- draw lines around element 'BARO'
  graphics.set_color(1,1,1,1)
  graphics.draw_line(SCREEN_WIDTH+(-81), 1, SCREEN_WIDTH+(-1), 1)
  graphics.draw_line(SCREEN_WIDTH+(-1), 1, SCREEN_WIDTH+(-1), 36)
  graphics.draw_line(SCREEN_WIDTH+(-1), 36, SCREEN_WIDTH+(-81), 36)
  graphics.draw_line(SCREEN_WIDTH+(-81), 36, SCREEN_WIDTH+(-81), 1)

  -- draw some text
  graphics.set_color(1,1,1,1)
  draw_string_Helvetica_18(SCREEN_WIDTH+(-76), 291, "AP")
  graphics.set_color(1,1,1,1)
  draw_string_Helvetica_10(SCREEN_WIDTH+(-36), 304, "SPD")
  draw_string_Helvetica_18(SCREEN_WIDTH+(-36), 286, string.format("%03i", xp_autopilot_airspeed))
  graphics.set_color(1,1,1,1)
  draw_string_Helvetica_10(SCREEN_WIDTH+(-76), 269, "ALT")
  draw_string_Helvetica_18(SCREEN_WIDTH+(-66), 251, string.format("%05i", ALT))
  graphics.set_color(1,1,1,1)
  draw_string_Helvetica_10(SCREEN_WIDTH+(-76), 234, "V V I")
  draw_string_Helvetica_18(SCREEN_WIDTH+(-56), 216, string.format("%04i", VVI))
  graphics.set_color(1,1,1,1)
  draw_string_Helvetica_10(SCREEN_WIDTH+(-76), 164, "COM")
  draw_string_Helvetica_18(SCREEN_WIDTH+(-69), 146, string.format("%3.2f", COM1/100))
  graphics.set_color(1,1,1,1)
  draw_string_Helvetica_10(SCREEN_WIDTH+(-76), 129, "NAV")
  draw_string_Helvetica_18(SCREEN_WIDTH+(-69), 111, string.format("%3.2f", NAV1/100))
  graphics.set_color(1,1,1,1)
  draw_string_Helvetica_10(SCREEN_WIDTH+(-76), 94, "ADF")
  draw_string_Helvetica_18(SCREEN_WIDTH+(-54), 76, string.format("%04i", ADF1))
  graphics.set_color(1,1,1,1)
  draw_string_Helvetica_10(SCREEN_WIDTH+(-36), 199, "OBS")
  draw_string_Helvetica_18(SCREEN_WIDTH+(-36), 181, string.format("%03i", OBS1))
  graphics.set_color(1,1,1,1)
  draw_string_Helvetica_10(SCREEN_WIDTH+(-76), 199, "HDG")
  draw_string_Helvetica_18(SCREEN_WIDTH+(-76), 181, string.format("%03i", HDG))
  graphics.set_color(1,1,1,1)
  draw_string_Helvetica_10(SCREEN_WIDTH+(-76), 59, "SQUAWK")
  draw_string_Helvetica_18(SCREEN_WIDTH+(-54), 41, string.format("%04i", SQUAWK))
  graphics.set_color(1,1,1,1)
  draw_string_Helvetica_10(SCREEN_WIDTH+(-76), 24, "BARO")
  draw_string_Helvetica_18(SCREEN_WIDTH+(-56), 6, string.format("%4.0f", QNH_Pilot * 33.86531))
end

do_every_draw("draw_my_radios()")

function my_radios_mouse_click_events()
  -- we will only react once
  if MOUSE_STATUS ~= "down" then
    return
  end

  -- mouse click switch for element 'AP'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-41) and MOUSE_Y >= 281 and MOUSE_Y <= 316 then
    if xp_autopilot_mode == 1 then
      xp_autopilot_mode = 2
    else
      xp_autopilot_mode = 1
    end
   RESUME_MOUSE_CLICK = true
  end

  -- mouse click switch for element 'Speed'
  if MOUSE_X >= SCREEN_WIDTH+(-41) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 281 and MOUSE_Y <= 316 then
    if xp_autothrottle_enabled == 0 then
      xp_autothrottle_enabled = 1
    else
      xp_autothrottle_enabled = 0
    end
   RESUME_MOUSE_CLICK = true
  end

  -- mouse click action for element 'ALT'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 246 and MOUSE_Y <= 281 then
     command_once("sim/autopilot/altitude_hold")
   RESUME_MOUSE_CLICK = true
  end

  -- mouse click action for element 'VVI'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 211 and MOUSE_Y <= 246 then
     command_once("sim/autopilot/vertical_speed")
   RESUME_MOUSE_CLICK = true
  end

  -- mouse click action for element 'COM'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 141 and MOUSE_Y <= 176 then
     COM1 = 12280
   RESUME_MOUSE_CLICK = true
  end

  -- mouse click action for element 'NAV'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 106 and MOUSE_Y <= 141 then
     command_once("sim/autopilot/NAV")
   RESUME_MOUSE_CLICK = true
  end

  -- mouse click action for element 'OBS'
  if MOUSE_X >= SCREEN_WIDTH+(-41) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 176 and MOUSE_Y <= 211 then
     command_once("sim/autopilot/NAV")
   RESUME_MOUSE_CLICK = true
  end

  -- mouse click action for element 'HDG'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-41) and MOUSE_Y >= 176 and MOUSE_Y <= 211 then
     command_once("sim/autopilot/heading")
   RESUME_MOUSE_CLICK = true
  end

  -- mouse click switch for element 'SQUAWK'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 36 and MOUSE_Y <= 71 then
    if TRANSPONDER_MODE == 1 then
      TRANSPONDER_MODE = 2
    else
      TRANSPONDER_MODE = 1
    end
   RESUME_MOUSE_CLICK = true
  end

  -- mouse click action for element 'BARO'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 1 and MOUSE_Y <= 36 then
     QNH_Pilot = 29.92
   RESUME_MOUSE_CLICK = true
  end

end

do_on_mouse_click("my_radios_mouse_click_events()")

function my_radios_mouse_wheel_events()
  -- mouse wheel action for element 'Speed'
  if MOUSE_X >= SCREEN_WIDTH+(-41) and MOUSE_X <= SCREEN_WIDTH+(-16) and MOUSE_Y >= 281 and MOUSE_Y <= 316 then
     xp_autopilot_airspeed = math.floor(xp_autopilot_airspeed / 5 + MOUSE_WHEEL_CLICKS) * 5
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'Speed'
  if MOUSE_X >= SCREEN_WIDTH+(-16) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 281 and MOUSE_Y <= 316 then
     xp_autopilot_airspeed = xp_autopilot_airspeed + MOUSE_WHEEL_CLICKS
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'ALT'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-46) and MOUSE_Y >= 246 and MOUSE_Y <= 281 then
     ALT = math.floor(ALT / 100 + MOUSE_WHEEL_CLICKS * 10) * 100
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'ALT'
  if MOUSE_X >= SCREEN_WIDTH+(-45) and MOUSE_X <= SCREEN_WIDTH+(-5) and MOUSE_Y >= 246 and MOUSE_Y <= 281 then
     ALT = math.floor(ALT / 100 + MOUSE_WHEEL_CLICKS) * 100
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'ALT'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 246 and MOUSE_Y <= 281 then
     autopilot_helper_set_VVI()
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'VVI'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 211 and MOUSE_Y <= 246 then
     VVI = math.floor(VVI / 100 + MOUSE_WHEEL_CLICKS) * 100
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'COM'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-36) and MOUSE_Y >= 141 and MOUSE_Y <= 176 then
     COM1 = COM1 + MOUSE_WHEEL_CLICKS * 100
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'COM'
  if MOUSE_X >= SCREEN_WIDTH+(-36) and MOUSE_X <= SCREEN_WIDTH+(-26) and MOUSE_Y >= 141 and MOUSE_Y <= 176 then
     COM1 = COM1 + MOUSE_WHEEL_CLICKS * 10
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'COM'
  if MOUSE_X >= SCREEN_WIDTH+(-26) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 141 and MOUSE_Y <= 176 then
     COM1 = COM1 + MOUSE_WHEEL_CLICKS
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'NAV'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-36) and MOUSE_Y >= 106 and MOUSE_Y <= 141 then
     NAV1 = NAV1 + MOUSE_WHEEL_CLICKS * 100
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'NAV'
  if MOUSE_X >= SCREEN_WIDTH+(-36) and MOUSE_X <= SCREEN_WIDTH+(-26) and MOUSE_Y >= 106 and MOUSE_Y <= 141 then
     NAV1 = NAV1 + MOUSE_WHEEL_CLICKS * 10
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'NAV'
  if MOUSE_X >= SCREEN_WIDTH+(-26) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 106 and MOUSE_Y <= 141 then
     NAV1 = NAV1 + MOUSE_WHEEL_CLICKS
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'ADF'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-36) and MOUSE_Y >= 71 and MOUSE_Y <= 106 then
     ADF1 = ADF1 + MOUSE_WHEEL_CLICKS * 100
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'ADF'
  if MOUSE_X >= SCREEN_WIDTH+(-36) and MOUSE_X <= SCREEN_WIDTH+(-26) and MOUSE_Y >= 71 and MOUSE_Y <= 106 then
     ADF1 = ADF1 + MOUSE_WHEEL_CLICKS * 10
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'ADF'
  if MOUSE_X >= SCREEN_WIDTH+(-26) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 71 and MOUSE_Y <= 106 then
     ADF1 = ADF1 + MOUSE_WHEEL_CLICKS
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'OBS'
  if MOUSE_X >= SCREEN_WIDTH+(-41) and MOUSE_X <= SCREEN_WIDTH+(-16) and MOUSE_Y >= 176 and MOUSE_Y <= 211 then
     OBS1 = math.floor(OBS1 / 10 + MOUSE_WHEEL_CLICKS) * 10
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'OBS'
  if MOUSE_X >= SCREEN_WIDTH+(-16) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 176 and MOUSE_Y <= 211 then
     OBS1 = OBS1 + MOUSE_WHEEL_CLICKS
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'HDG'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-56) and MOUSE_Y >= 176 and MOUSE_Y <= 211 then
     HDG = math.floor(HDG / 10 + MOUSE_WHEEL_CLICKS) * 10
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'HDG'
  if MOUSE_X >= SCREEN_WIDTH+(-56) and MOUSE_X <= SCREEN_WIDTH+(-41) and MOUSE_Y >= 176 and MOUSE_Y <= 211 then
     HDG = HDG + MOUSE_WHEEL_CLICKS
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'SQUAWK'
  if MOUSE_X >= SCREEN_WIDTH+(-54) and MOUSE_X <= SCREEN_WIDTH+(-45) and MOUSE_Y >= 36 and MOUSE_Y <= 71 then
     SQUAWK = SQUAWK + 1000 * MOUSE_WHEEL_CLICKS
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'SQUAWK'
  if MOUSE_X >= SCREEN_WIDTH+(-44) and MOUSE_X <= SCREEN_WIDTH+(-35) and MOUSE_Y >= 36 and MOUSE_Y <= 71 then
     SQUAWK = SQUAWK +  100 * MOUSE_WHEEL_CLICKS
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'SQUAWK'
  if MOUSE_X >= SCREEN_WIDTH+(-34) and MOUSE_X <= SCREEN_WIDTH+(-25) and MOUSE_Y >= 36 and MOUSE_Y <= 71 then
     SQUAWK = SQUAWK +   10 * MOUSE_WHEEL_CLICKS
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'SQUAWK'
  if MOUSE_X >= SCREEN_WIDTH+(-24) and MOUSE_X <= SCREEN_WIDTH+(-15) and MOUSE_Y >= 36 and MOUSE_Y <= 71 then
     SQUAWK = SQUAWK +        MOUSE_WHEEL_CLICKS
   RESUME_MOUSE_WHEEL = true
  end

  -- mouse wheel action for element 'BARO'
  if MOUSE_X >= SCREEN_WIDTH+(-81) and MOUSE_X <= SCREEN_WIDTH+(-1) and MOUSE_Y >= 1 and MOUSE_Y <= 36 then
     QNH_Pilot = QNH_Pilot + MOUSE_WHEEL_CLICKS / 100
   RESUME_MOUSE_WHEEL = true
  end

end

do_on_mouse_wheel("my_radios_mouse_wheel_events()")

